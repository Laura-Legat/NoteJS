apiVersion: v1
kind: Service
metadata:
  name: notejs-staging-service
  namespace: staging
spec:
# export all pods with label notejs
  selector:
    app: notejs-staging
  ports:
# listen for requests on port 80 and forward them to port 3000 of the target pods
    - name: notejs-staging-service-port
      protocol: TCP
      port: 80
      targetPort: 6000
# make  pods accessible from outside of the cluster
# type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: notejs-staging-ingress
  namespace: staging
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - http:
      paths:
      - path: /staging
        pathType: Prefix
        backend:
          service:
# all http calls are forwarded to notejs-service:80
            name: notejs-staging-service
            port:
              number: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notejs-staging-deployment
  namespace: staging
# later used to bind the service to the pod
  labels:
    app: notejs-staging
spec:
# spin up 2 replicas of my notejs pod (containing the containers)
  replicas: 1
# select pods with app:notejs-staging label
  selector:
    matchLabels:
      app: notejs-staging
  template:
    metadata:
# define label for the pods wrapping up a notejs container
      labels:
        app: notejs-staging
    spec:
      containers:
      - name: notejs-staging
        image: lauralgt/notejs:3.0.0
        ports:
        - containerPort: 6000
# the following info will be made available to the process in the container
        env:
        - name: MONGO_URL
# connect to notes-staging collection
          value: mongodb://mongo:27017/notes-staging
        - name: PORT
          value: "6000"
        - name: ROUTER_BASE
          value: /staging
# forces the Docker image to always be re-downloaded, even if already downloaded
        imagePullPolicy: Always
# pass secret stored for private image repo
      imagePullSecrets:
      - name: regcred-staging